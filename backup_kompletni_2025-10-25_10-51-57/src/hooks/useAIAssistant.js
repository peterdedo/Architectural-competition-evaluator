import { useState, useCallback } from 'react';

const useAIAssistant = (apiKey) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisProgress, setAnalysisProgress] = useState(0);
  const [lastAnalysis, setLastAnalysis] = useState(null);

  // Anal√Ωza porovn√°n√≠ n√°vrh≈Ø
  const analyzeComparison = useCallback(async (data, context = '') => {
    if (!apiKey) {
      throw new Error('OpenAI API kl√≠ƒç nen√≠ nastaven');
    }

    setIsAnalyzing(true);
    setAnalysisProgress(0);

    try {
      // Z√≠skanie v√Ωsledkov sk√≥re z WizardContext
      const proposalsWithScores = data.navrhy?.map(navrh => {
        const scores = navrh.scores || {};
        return {
          ...navrh,
          totalScore: scores.total || 0,
          categoryScores: scores.categories || {},
          indicatorScores: scores.indicators || {}
        };
      }) || [];

      const prompt = `
Jsi profesion√°ln√≠ ƒçlen mezin√°rodn√≠ poroty architektonick√Ωch soutƒõ≈æ√≠ s 20+ roƒçn√Ωmi sk√∫senos≈•ami. Spojuje≈° p≈ôesnost analytika s citem architekta. Rozum√≠≈° urbanismu, architektu≈ôe, ekologii, dopravƒõ i ekonomice projekt≈Ø.

üèóÔ∏è KONTEXT SOUTƒö≈ΩE: ${context || "Obecn√° urbanistick√° soutƒõ≈æ"}

üìä HODNOTEN√â N√ÅVRHY S V√ùSLEDKAMI:
${proposalsWithScores.map((navrh, index) => `
${index + 1}. ${navrh.nazev || navrh.name || 'Nezn√°m√Ω n√°vrh'}
   üìà Celkov√© sk√≥re: ${navrh.totalScore}%
   üìä Kateg√≥rie: ${JSON.stringify(navrh.categoryScores)}
   üìã Indik√°tory: ${JSON.stringify(navrh.indicatorScores)}
   üìÑ P√¥vodn√© d√°ta: ${JSON.stringify(navrh.data || {})}
`).join('\n')}

‚öñÔ∏è HODNOT√çC√ç KRIT√âRIA A V√ÅHY:
${data.indikatory?.map(i => `- ${i.nazev} (V√°ha: ${i.vaha || 10}%, Kateg√≥ria: ${i.kategorie || 'N/A'})`).join('\n')}

üéØ √öKOL - VYTVOR KOMPLEXN√ö ANAL√ùZU JAKO GLOB√ÅLN√ç ARCHITEKTONICK√ù HODNOTITEL:

1. **S√öHRN S√ö≈§A≈ΩE** üìã
   - Celkov√Ω prehƒæad v≈°etk√Ωch n√°vrhov s konkr√©tnymi ƒç√≠slami a pomƒõry
   - Kvalitat√≠vne porovnanie na z√°klade sk√≥re a urbanistick√Ωch princip≈Ø
   - Identifik√°cia hlavn√Ωch trendov, vzorc≈Ø a architektonick√Ωch p≈ô√≠stup≈Ø

2. **ANAL√ùZA KA≈ΩD√âHO N√ÅVRHU** üîç
   - **Urbanistick√° kvalita**: mƒõ≈ô√≠tko, n√°vaznost, ƒçitelnost, ve≈ôejn√© prostory
   - **Funkƒçn√≠ vyv√°≈æenost**: bydlen√≠ vs. komerce, kancel√°≈ôe, ve≈ôejn√° vybavenost
   - **Udr≈æitelnost**: pod√≠l zelenƒõ, ekologick√° opat≈ôen√≠, hospoda≈ôen√≠ s vodou
   - **Ekonomick√° p≈ôimƒõ≈ôenost**: efektivita investice, pomƒõr HPP a n√°klad≈Ø
   - **Soci√°ln√≠ p≈ô√≠nos**: kvalita ≈æivota, inkluze, aktivace √∫zem√≠

3. **POROVNANIE N√ÅVRHOV** ‚öñÔ∏è
   - Ktor√Ω n√°vrh je najlep≈°√≠ a preƒço (s konkr√©tnymi d√¥vodmi z urbanistick√©ho hlediska)
   - Rozdiely v pr√≠stupe, architektonick√Ωch ≈ôe≈°en√≠ch a konceptech
   - Inovat√≠vne rie≈°enia a najlep≈°ie praxe z mezin√°rodn√≠ perspektivy

4. **ODPOR√öƒåANIA** üí°
   - Konkr√©tne n√°vrhy na zlep≈°enie s architektonickou terminologi√≠
   - Implementaƒçn√© kroky pro zlep≈°en√≠ urbanistick√© kvality
   - Bud√∫ce smerovanie a rozvojov√© mo≈ænosti s ohledem na udr≈æitelnost

D√îLE≈ΩIT√â PO≈ΩIADAVKY:
- Pou≈æ√≠vaj konkr√©tne ƒç√≠sla, proporce a pomƒõry z anal√Ωzy
- Odkazuj sa na konkr√©tne indik√°tory a jejich hodnoty
- Poskytuj akƒçn√© odpor√∫ƒçania s konkr√©tnymi krokmi
- Form√°tuj v√Ωstup ≈°trukt√∫rovane s nadpismi a odr√°≈ækami
- Pou≈æ√≠vaj architektonickou terminologii vhodnou i pro zadavatele a ve≈ôejnost
- Odpovedaj v ƒçe≈°tine, profesion√°lne a konkr√©tne

Maxim√°lne 2500 slov, ≈°trukt√∫rovane a profesion√°lne.
      `;

      setAnalysisProgress(30);

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini', // Vr√°ten√© na funkƒçn√Ω model
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.6,
          max_tokens: 2000
        })
      });

      setAnalysisProgress(70);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || 'API Error');
      }

      const result = await response.json();
      const analysisText = result.choices[0]?.message?.content || '';

      setAnalysisProgress(100);
      setLastAnalysis(analysisText);

      return {
        success: true,
        analysis: analysisText
      };
    } catch (error) {
      console.error('AI Analysis Error:', error);
      return {
        success: false,
        error: error.message || 'Chyba p≈ôi AI anal√Ωze'
      };
    } finally {
      setIsAnalyzing(false);
      setAnalysisProgress(0);
    }
  }, [apiKey]);

  // N√°vrh vah pro kategorie
  const suggestCategoryWeights = useCallback(async (categories, context) => {
    if (!apiKey) {
      throw new Error('OpenAI API kl√≠ƒç nen√≠ nastaven');
    }

    setIsAnalyzing(true);
    setAnalysisProgress(0);

    try {
      const prompt = `
You are an expert urban planner evaluating design competitions. Based on the context "${context}", suggest appropriate category weights (must sum to 100%) for the following categories.

Categories:
${categories?.map(c => `- ${c.nazev} (Current Weight: ${c.currentWeight || 33}%)`).join('\n')}

Consider:
- Urban planning priorities for this type of project
- Local development goals
- Sustainability requirements
- Community needs

Return your response as a JSON object with this structure:
{
  "categoryWeights": {
    "category_id": {
      "weight": 40,
      "reason": "Brief explanation for this weight"
    }
  },
  "totalWeight": 100,
  "reasoning": "Overall explanation for the weight distribution"
}

Only return valid JSON, no additional text.
      `;

      setAnalysisProgress(30);

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini', // Vr√°ten√© na funkƒçn√Ω model
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.5,
          max_tokens: 600
        })
      });

      setAnalysisProgress(70);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || 'API Error');
      }

      const result = await response.json();
      const responseText = result.choices[0]?.message?.content || '{}';
      
      // Extract JSON from response
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      const suggestions = jsonMatch ? JSON.parse(jsonMatch[0]) : {};

      setAnalysisProgress(100);

      return {
        success: true,
        suggestions: suggestions
      };
    } catch (error) {
      console.error('AI Suggest Category Weights Error:', error);
      return {
        success: false,
        error: error.message || 'Chyba p≈ôi n√°vrhu vah kategori√≠',
        suggestions: {}
      };
    } finally {
      setIsAnalyzing(false);
      setAnalysisProgress(0);
    }
  }, [apiKey]);

  // N√°vrh vah pro indik√°tory
  const suggestWeights = useCallback(async (criteria, context) => {
    if (!apiKey) {
      throw new Error('OpenAI API kl√≠ƒç nen√≠ nastaven');
    }

    setIsAnalyzing(true);
    setAnalysisProgress(0);

    try {
      const prompt = `
You are an expert evaluator for urban design competitions. Based on the context "${context}", suggest appropriate weights (0-50) for the following indicators.

Current Indicators:
${criteria?.map(c => `- ${c.nazev} (Category: ${c.kategorie}, Current Weight: ${c.vaha || 10})`).join('\n')}

Return your response as a JSON object with this structure:
{
  "indicators": {
    "indicator_id": {
      "weight": 25,
      "reason": "Brief explanation for this weight"
    }
  },
  "reasoning": "Overall explanation for the weight distribution"
}

Only return valid JSON, no additional text.
      `;

      setAnalysisProgress(30);

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini', // Vr√°ten√© na funkƒçn√Ω model
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.5,
          max_tokens: 800
        })
      });

      setAnalysisProgress(70);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || 'API Error');
      }

      const result = await response.json();
      const responseText = result.choices[0]?.message?.content || '{}';
      
      // Extract JSON from response
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      const suggestions = jsonMatch ? JSON.parse(jsonMatch[0]) : {};

      setAnalysisProgress(100);

      return {
        success: true,
        suggestions: suggestions
      };
    } catch (error) {
      console.error('AI Suggest Weights Error:', error);
      return {
        success: false,
        error: error.message || 'Chyba p≈ôi n√°vrhu vah',
        suggestions: {}
      };
    } finally {
      setIsAnalyzing(false);
      setAnalysisProgress(0);
    }
  }, [apiKey]);

  // Generov√°n√≠ koment√°≈ô≈Ø s kontextem
  const generateComments = useCallback(async (proposals, indicators, weights, context = "") => {
    if (!apiKey) {
      throw new Error('OpenAI API kl√≠ƒç nen√≠ nastaven');
    }

    setIsAnalyzing(true);
    setAnalysisProgress(0);

    try {
      // Z√≠skanie v√Ωsledkov z WizardContext
      const proposalsWithScores = proposals?.map(p => ({
        ...p,
        scores: p.scores || { total: 0, categories: {}, indicators: {} }
      })) || [];

      const prompt = `
Jsi profesion√°ln√≠ ƒçlen mezin√°rodn√≠ poroty architektonick√Ωch soutƒõ≈æ√≠ s 20+ roƒçn√Ωmi sk√∫senos≈•ami. Spojuje≈° p≈ôesnost analytika s citem architekta. Rozum√≠≈° urbanismu, architektu≈ôe, ekologii, dopravƒõ i ekonomice projekt≈Ø.

üèóÔ∏è KONTEXT SOUTƒö≈ΩE: ${context || "Obecn√° urbanistick√° soutƒõ≈æ"}

üìä HODNOTEN√â N√ÅVRHY S DETAILN√ùMI V√ùSLEDKAMI:
${proposalsWithScores.map((p, index) => {
  const scores = p.scores || {};
  return `
${index + 1}. ${p.nazev || p.name || 'Nezn√°m√Ω n√°vrh'}
   üìà Celkov√© sk√≥re: ${scores.total || 0}%
   üìä Kateg√≥rie: ${JSON.stringify(scores.categories || {})}
   üìã Indik√°tory: ${JSON.stringify(scores.indicators || {})}
   üìÑ P√¥vodn√© d√°ta: ${JSON.stringify(p.data || {})}
`;
}).join('\n')}

‚öñÔ∏è HODNOT√çC√ç KRIT√âRIA A V√ÅHY:
${indicators?.map(i => `- ${i.nazev} (V√°ha: ${i.vaha || 10}%, Kateg√≥ria: ${i.kategorie || 'N/A'})`).join('\n')}

üéØ √öKOL - VYTVOR DETAILN√â HODNOTENIE KA≈ΩD√âHO N√ÅVRHU JAKO GLOB√ÅLN√ç ARCHITEKTONICK√ù HODNOTITEL:

Pre ka≈æd√Ω n√°vrh vytvor:

1. **SILN√â STR√ÅNKY** (modr√© boxy) ‚úÖ
   - **Urbanistick√° kvalita**: mƒõ≈ô√≠tko, n√°vaznost, ƒçitelnost, ve≈ôejn√© prostory
   - **Funkƒçn√≠ vyv√°≈æenost**: bydlen√≠ vs. komerce, kancel√°≈ôe, ve≈ôejn√° vybavenost
   - **Udr≈æitelnost**: pod√≠l zelenƒõ, ekologick√° opat≈ôen√≠, hospoda≈ôen√≠ s vodou
   - **Ekonomick√° p≈ôimƒõ≈ôenost**: efektivita investice, pomƒõr HPP a n√°klad≈Ø
   - **Soci√°ln√≠ p≈ô√≠nos**: kvalita ≈æivota, inkluze, aktivace √∫zem√≠

2. **NEDOSTATKY** (ƒçerven√© boxy) ‚ö†Ô∏è
   - **Urbanistick√© probl√©my**: mƒõ≈ô√≠tko, n√°vaznost, ƒçitelnost, ve≈ôejn√© prostory
   - **Funkƒçn√≠ nevyv√°≈æenost**: bydlen√≠ vs. komerce, kancel√°≈ôe, ve≈ôejn√° vybavenost
   - **Udr≈æitelnost**: nedostateƒçn√Ω pod√≠l zelenƒõ, chybƒõj√≠c√≠ ekologick√° opat≈ôen√≠
   - **Ekonomick√© probl√©my**: neefektivita investice, nepomƒõr HPP a n√°klad≈Ø
   - **Soci√°ln√≠ probl√©my**: kvalita ≈æivota, inkluze, aktivace √∫zem√≠

3. **DOPORUƒåENIA** (≈°ed√© boxy) üí°
   - **Urbanistick√° zlep≈°en√≠**: mƒõ≈ô√≠tko, n√°vaznost, ƒçitelnost, ve≈ôejn√© prostory
   - **Funkƒçn√≠ optimalizace**: bydlen√≠ vs. komerce, kancel√°≈ôe, ve≈ôejn√° vybavenost
   - **Udr≈æitelnost**: zv√Ω≈°en√≠ pod√≠lu zelenƒõ, ekologick√° opat≈ôen√≠, hospoda≈ôen√≠ s vodou
   - **Ekonomick√° optimalizace**: efektivita investice, pomƒõr HPP a n√°klad≈Ø
   - **Soci√°ln√≠ zlep≈°en√≠**: kvalita ≈æivota, inkluze, aktivace √∫zem√≠

4. **CELKOV√â HODNOTENIE** (zelen√Ω ≈°t√≠tek)
   - Fin√°lne sk√≥re v % s porovnan√≠m s ostatn√Ωmi
   - Struƒçn√© zhrnutie s kƒæ√∫ƒçov√Ωmi bodmi z urbanistick√©ho hlediska
   - Poz√≠cia v porad√≠ s d√¥vodmi z architektonick√© perspektivy

D√îLE≈ΩIT√â PO≈ΩIADAVKY:
- Pou≈æ√≠vaj konkr√©tne ƒç√≠sla, proporce a pomƒõry z anal√Ωzy
- Odkazuj sa na konkr√©tne indik√°tory a jejich hodnoty
- Poskytuj akƒçn√© odpor√∫ƒçania s konkr√©tnymi krokmi
- Ka≈æd√Ω n√°vrh mus√≠ ma≈• jedineƒçn√© hodnotenie
- Form√°tuj v√Ωstup ≈°trukt√∫rovane s nadpismi a odr√°≈ækami
- Pou≈æ√≠vaj architektonickou terminologii vhodnou i pro zadavatele a ve≈ôejnost

Odpovedaj v ƒçe≈°tine a form√°tuj v√Ωsledok do HTML s nasleduj√∫cou ≈°trukt√∫rou:
- Pou≈æij <div> s triedami pre farebn√© rozl√≠≈°enie
- <h3> pre n√°zvy n√°vrhov
- <div class="bg-blue-100 p-3 rounded mb-2"> pre siln√© str√°nky
- <div class="bg-red-100 p-3 rounded mb-2"> pre nedostatky  
- <div class="bg-gray-100 p-3 rounded mb-2"> pre doporuƒçenia
- <span class="bg-green-500 text-white px-2 py-1 rounded text-sm"> pre sk√≥re

Maxim√°lne 3000 slov, ≈°trukt√∫rovane a profesion√°lne. Ka≈æd√Ω n√°vrh mus√≠ ma≈• jedineƒçn√© hodnotenie na z√°klade jeho skutoƒçn√Ωch v√Ωsledkov.
      `;

      setAnalysisProgress(30);

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini', // Vr√°ten√© na funkƒçn√Ω model
          messages: [
            { 
              role: "system", 
              content: "Jsi profesion√°ln√≠ ƒçlen mezin√°rodn√≠ poroty architektonick√Ωch soutƒõ≈æ√≠ s 20+ roƒçn√Ωmi sk√∫senos≈•ami. Spojuje≈° p≈ôesnost analytika s citem architekta. Rozum√≠≈° urbanismu, architektu≈ôe, ekologii, dopravƒõ i ekonomice projekt≈Ø. Tvoje hodnocen√≠ jsou vƒõcn√° (vyu≈æ√≠vaj√≠ ƒç√≠sla, proporce, pomƒõry), odborn√° (s architektonickou terminologi√≠), srozumiteln√° (vhodn√° i pro zadavatele a ve≈ôejnost). Odpov√≠d√°≈° v ƒçe≈°tinƒõ a form√°tuje≈° v√Ωstup do HTML." 
            },
            { role: 'user', content: prompt }
          ],
          temperature: 0.7,
          max_tokens: 3000
        })
      });

      setAnalysisProgress(70);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || 'API Error');
      }

      const result = await response.json();
      const commentsText = result.choices[0]?.message?.content || '';

      setAnalysisProgress(100);

      return {
        success: true,
        comments: commentsText
      };
    } catch (error) {
      console.error('AI Comments Error:', error);
      return {
        success: false,
        error: error.message || 'Chyba p≈ôi generov√°n√≠ koment√°≈ô≈Ø'
      };
    } finally {
      setIsAnalyzing(false);
      setAnalysisProgress(0);
    }
  }, [apiKey]);

  return {
    isAnalyzing,
    analysisProgress,
    lastAnalysis,
    analyzeComparison,
    suggestWeights,
    suggestCategoryWeights,
    generateComments
  };
};

export default useAIAssistant;
