# 🤖 AI KOMPONENTY - URBAN ANALYTICS v2.2
## Záloha hlavných AI komponentov a funkcionalít

**Dátum:** 21. október 2025, 15:43:44
**Verzia:** Urban Analytics v2.2 - AI Enhanced

---

## 📁 HLAVNÉ AI SÚBORY

### 1. useAIAssistant.js
```javascript
// src/hooks/useAIAssistant.js
import { useState } from "react";

export const useAIAssistant = (apiKey) => {
  const [loading, setLoading] = useState(false);
  const [response, setResponse] = useState(null);

  const analyzeComparison = async (data) => {
    setLoading(true);
    try {
      const prompt = `
      You are an expert urban planner evaluating design competition entries.
      Based on these indicators and weights, summarize key insights and recommendations:
      ${JSON.stringify(data, null, 2)}
      `;
      const res = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [{ role: "user", content: prompt }],
          temperature: 0.6,
        }),
      });
      const json = await res.json();
      setResponse(json.choices[0].message.content);
      return json.choices[0].message.content;
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const suggestWeights = async (criteria, context) => {
    setLoading(true);
    try {
      const prompt = `
      You are an AI design evaluator. Suggest better weights for these indicators
      for a competition focused on "${context}".
      Indicators:
      ${JSON.stringify(criteria, null, 2)}
      Return concise JSON: [{id, suggestedWeight, reason}]
      `;
      const res = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [{ role: "user", content: prompt }],
        }),
      });
      const json = await res.json();
      return json.choices[0].message.content;
    } catch (e) {
      console.error(e);
    } finally {
      setLoading(false);
    }
  };

  return { loading, response, analyzeComparison, suggestWeights };
};
```

### 2. ExpandableRadarChart.jsx
```javascript
// src/components/ExpandableRadarChart.jsx
import React, { useState, useMemo, useRef } from 'react';
import ReactECharts from 'echarts-for-react';
import { motion, AnimatePresence } from 'framer-motion';
import html2canvas from 'html2canvas';
import { 
  Target, 
  TrendingUp, 
  Award, 
  Maximize2, 
  X, 
  Download,
  RotateCcw,
  Loader2
} from 'lucide-react';

const ExpandableRadarChart = ({ data, indicators, weights = {} }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const chartRef = useRef(null);

  // Chart configuration with expandable options
  const chartOption = useMemo(() => {
    // ECharts configuration with responsive sizing
    // Different sizes for compact vs expanded mode
  }, [data, indicators, weights, isExpanded]);

  const handleDownload = async () => {
    if (!chartRef.current) return;
    
    setIsDownloading(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const chartElement = chartRef.current.getEchartsInstance().getDom();
      
      const canvas = await html2canvas(chartElement, {
        backgroundColor: '#ffffff',
        scale: 2,
        useCORS: true,
        allowTaint: true,
        logging: false
      });
      
      const now = new Date();
      const dateStr = now.toISOString().split('T')[0];
      const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-');
      const filename = `radarovy_graf_${dateStr}_${timeStr}.png`;
      
      const link = document.createElement('a');
      link.download = filename;
      link.href = canvas.toDataURL('image/png');
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      alert(`Graf bol úspešne uložený ako ${filename}`);
      
    } catch (error) {
      console.error('Chyba pri ukladaní grafu:', error);
      alert('Chyba pri ukladaní grafu. Skúste to znovu.');
    } finally {
      setIsDownloading(false);
    }
  };

  // Component JSX with modal and fullscreen support
  return (
    <>
      {/* Compact radar chart */}
      <motion.div>
        {/* Chart with download and expand buttons */}
        <ReactECharts
          ref={chartRef}
          option={chartOption}
          style={{ height: '500px', width: '100%' }}
          opts={{ renderer: 'canvas' }}
        />
      </motion.div>

      {/* Expanded modal */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <motion.div className={`bg-white rounded-xl shadow-2xl w-full max-w-7xl ${
              isFullscreen ? 'h-[95vh]' : 'max-h-[90vh]'
            } overflow-hidden`}>
              {/* Modal header with actions */}
              <div className="bg-gradient-to-r from-blue-600 to-green-500 text-white p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center">
                      <Target size={24} className="text-white" />
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold">Rozšířený radarový graf</h2>
                      <p className="text-white/80">
                        {data.length} návrhů × {indicators.length} indikátorů
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={handleDownload}
                      disabled={isDownloading}
                      className="flex items-center gap-2 px-3 py-2 bg-white/20 rounded-lg hover:bg-white/30 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                      title={isDownloading ? "Ukládám..." : "Stáhnout graf"}
                    >
                      {isDownloading ? (
                        <Loader2 size={16} className="animate-spin" />
                      ) : (
                        <Download size={16} />
                      )}
                    </button>
                    <button
                      onClick={handleFullscreen}
                      className="flex items-center gap-2 px-3 py-2 bg-white/20 rounded-lg hover:bg-white/30 transition-colors"
                      title={isFullscreen ? "Zmenšit" : "Celá obrazovka"}
                    >
                      <Maximize2 size={16} />
                    </button>
                    <button
                      onClick={() => setIsExpanded(false)}
                      className="w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center hover:bg-white/30 transition-colors"
                    >
                      <X size={20} />
                    </button>
                  </div>
                </div>
              </div>

              {/* Modal content */}
              <div className="p-6 overflow-y-auto" style={{ height: isFullscreen ? 'calc(95vh - 120px)' : 'calc(90vh - 120px)' }}>
                {/* Extended statistics */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                  {/* 4 stat cards */}
                </div>

                {/* Extended ECharts component */}
                <div className="bg-white rounded-xl border border-gray-200 p-6">
                  <ReactECharts
                    option={chartOption}
                    style={{ 
                      height: isFullscreen ? 'calc(95vh - 400px)' : '700px', 
                      width: '100%' 
                    }}
                    opts={{ renderer: 'canvas' }}
                  />
                </div>

                {/* Extended legend */}
                <div className="mt-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {/* Legend items */}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default ExpandableRadarChart;
```

### 3. StepComparison.jsx AI Integration
```javascript
// AI Integration v StepComparison.jsx
import { useAIAssistant } from '../hooks/useAIAssistant';

const StepComparison = ({ navrhy, vybraneNavrhy, setVybraneNavrhy, vybraneIndikatory, onBack }) => {
  const [aiComment, setAiComment] = useState(null);
  const [aiWeights, setAiWeights] = useState(null);
  const [showAiComment, setShowAiComment] = useState(false);
  const [showAiWeights, setShowAiWeights] = useState(false);
  
  const { loading: aiLoading, response, analyzeComparison, suggestWeights } = useAIAssistant(import.meta.env.VITE_OPENAI_KEY);

  const handleAIReview = async () => {
    if (!import.meta.env.VITE_OPENAI_KEY) {
      alert('OpenAI API kľúč nie je nastavený. Nastavte VITE_OPENAI_KEY v .env súbore.');
      return;
    }

    try {
      const vybraneNavrhyData = zpracovaneNavrhy.filter(navrh => vybraneNavrhy.has(navrh.id));
      const analysisData = {
        navrhy: vybraneNavrhyData,
        indikatory: vybraneIndikatoryList,
        vahy: vybraneIndikatoryList.reduce((acc, ind) => {
          acc[ind.id] = ind.vaha || 10;
          return acc;
        }, {})
      };

      const aiText = await analyzeComparison(analysisData);
      setAiComment(aiText);
      setShowAiComment(true);
      alert('AI shrnutí bolo úspešne vygenerované!');
    } catch (error) {
      console.error('Chyba pri AI analýze:', error);
      alert('Chyba pri generovaní AI shrnutí. Skúste to znovu.');
    }
  };

  const handleAISuggest = async () => {
    if (!import.meta.env.VITE_OPENAI_KEY) {
      alert('OpenAI API kľúč nie je nastavený. Nastavte VITE_OPENAI_KEY v .env súbore.');
      return;
    }

    try {
      const criteria = vybraneIndikatoryList.map(ind => ({
        id: ind.id,
        nazev: ind.nazev,
        kategorie: ind.kategorie,
        vaha: ind.vaha || 10
      }));

      const suggestions = await suggestWeights(criteria, "urbanistická súťaž");
      const parsedSuggestions = JSON.parse(suggestions);
      setAiWeights(parsedSuggestions);
      setShowAiWeights(true);
      alert('AI návrh váh bol úspešne vygenerovaný!');
    } catch (error) {
      console.error('Chyba pri AI návrhu váh:', error);
      alert('Chyba pri generovaní AI návrhu váh. Skúste to znovu.');
    }
  };

  return (
    <motion.div>
      {/* AI Tlačítka sekcia */}
      {vybraneNavrhy.size > 0 && (
        <motion.div className="bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-4 shadow-sm">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
                <Brain size={20} className="text-white" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">AI Asistent</h3>
                <p className="text-sm text-gray-600">Generujte AI shrnutí a návrhy váh</p>
              </div>
            </div>
            <div className="flex gap-2">
              <button
                onClick={handleAIReview}
                disabled={aiLoading}
                className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {aiLoading ? (
                  <Loader2 size={16} className="animate-spin" />
                ) : (
                  <Sparkles size={16} />
                )}
                AI Shrnutí
              </button>
              <button
                onClick={handleAISuggest}
                disabled={aiLoading}
                className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {aiLoading ? (
                  <Loader2 size={16} className="animate-spin" />
                ) : (
                  <Target size={16} />
                )}
                AI Návrh váh
              </button>
            </div>
          </div>
        </motion.div>
      )}

      {/* AI Výstupy */}
      {showAiComment && aiComment && (
        <motion.div className="bg-blue-50 border border-blue-200 rounded-xl p-6 shadow-sm">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-10 h-10 bg-blue-600 rounded-xl flex items-center justify-center">
              <Brain size={20} className="text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-blue-800">🧠 AI Shrnutí porovnání</h3>
              <p className="text-sm text-blue-600">Automaticky vygenerované hodnocení návrhů</p>
            </div>
            <button
              onClick={() => setShowAiComment(false)}
              className="ml-auto p-2 text-blue-400 hover:text-blue-600 transition-colors"
            >
              <X size={20} />
            </button>
          </div>
          <div className="bg-white rounded-lg p-4 border border-blue-100">
            <p className="text-gray-700 whitespace-pre-line leading-relaxed">{aiComment}</p>
          </div>
        </motion.div>
      )}

      {showAiWeights && aiWeights && (
        <motion.div className="bg-green-50 border border-green-200 rounded-xl p-6 shadow-sm">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-10 h-10 bg-green-600 rounded-xl flex items-center justify-center">
              <Target size={20} className="text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-green-800">⚖️ AI Návrh úprav váh</h3>
              <p className="text-sm text-green-600">Doporučené váhy indikátorů pro urbanistickou soutěž</p>
            </div>
            <button
              onClick={() => setShowAiWeights(false)}
              className="ml-auto p-2 text-green-400 hover:text-green-600 transition-colors"
            >
              <X size={20} />
            </button>
          </div>
          <div className="bg-white rounded-lg p-4 border border-green-100">
            <div className="space-y-3">
              {aiWeights.map((suggestion, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <div className="font-medium text-gray-900">
                      {vybraneIndikatoryList.find(ind => ind.id === suggestion.id)?.nazev || suggestion.id}
                    </div>
                    <div className="text-sm text-gray-600 mt-1">{suggestion.reason}</div>
                  </div>
                  <div className="text-right">
                    <div className="text-lg font-bold text-green-600">
                      {suggestion.suggestedWeight}%
                    </div>
                    <div className="text-xs text-gray-500">
                      (aktuálně: {vybraneIndikatoryList.find(ind => ind.id === suggestion.id)?.vaha || 10}%)
                    </div>
                  </div>
                </div>
              ))}
            </div>
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-700">
                💡 <strong>Tip:</strong> Klikněte na "Nastavit váhy" v hlavním menu pro aplikování těchto doporučení.
              </p>
            </div>
          </div>
        </motion.div>
      )}
    </motion.div>
  );
};
```

---

## 🔧 TECHNICKÉ DETAILE

### **AI API Integration:**
- **Model:** gpt-4o-mini (optimalizovaný pre rýchlosť a cenu)
- **Temperature:** 0.6 (vyvážené odpovede)
- **Max tokens:** Auto (podľa potreby)
- **Error handling:** Try-catch s user feedback

### **Chart Export:**
- **Library:** html2canvas
- **Resolution:** Scale 2x (vysoké rozlíšenie)
- **Format:** PNG
- **Naming:** Automatický s dátumom a časom

### **State Management:**
- **Loading states:** Spinner animácie
- **Error states:** User-friendly správy
- **Success states:** Confirmation alerts
- **Modal states:** Show/hide toggles

---

## 🎨 UI/UX FEATURES

### **AI UI Elements:**
- **Gradient backgrounds:** Blue-purple pre AI sekcie
- **Loading spinners:** Animated Loader2 ikony
- **Color coding:** Modrá pre shrnutí, zelená pre váhy
- **Interactive buttons:** Hover efekty a disabled stavy

### **Expandable Chart UI:**
- **Modal overlay:** Dark background s blur
- **Fullscreen toggle:** Maximálna veľkosť
- **Download button:** PNG export s loading stavom
- **Close button:** X ikona pre zatvorenie

### **Responsive Design:**
- **Mobile:** Stacked layout
- **Tablet:** 2-column grid
- **Desktop:** 3-4 column grid
- **Fullscreen:** Maximálne využitie priestoru

---

## 📊 POUŽITIE

### **1. AI Shrnutí:**
1. Vyberte návrhy v StepComparison
2. Kliknite "AI Shrnutí" (modré tlačítko)
3. Počkajte na generovanie (spinner)
4. Prečítajte AI hodnocenie v modrej karte

### **2. AI Návrh váh:**
1. Vyberte návrhy v StepComparison
2. Kliknite "AI Návrh váh" (fialové tlačítko)
3. Počkajte na generovanie (spinner)
4. Prezrite doporučenia v zelenej karte

### **3. Expandovateľný graf:**
1. Prejdite na "Porovnání návrhů"
2. Kliknite "Rozbalit graf" (modré tlačítko)
3. Použite fullscreen pre maximálnu veľkosť
4. Stiahnite graf cez download tlačítko

---

## 🔑 ENVIRONMENT SETUP

### **Required Environment Variables:**
```bash
# .env súbor
VITE_OPENAI_KEY=your_openai_api_key_here
```

### **API Requirements:**
- **OpenAI API kľúč** - Pre AI funkcionality
- **Model:** gpt-4o-mini (rýchly, presný, lacný)
- **Temperature:** 0.6 (vyvážené odpovede)
- **Rate limits:** Respektované automaticky

---

## ✅ TESTING CHECKLIST

### **AI Functionality:**
- ✅ API kľúč kontrola
- ✅ Loading stavy
- ✅ Error handling
- ✅ Response parsing
- ✅ UI zobrazenie

### **Expandable Radar Chart:**
- ✅ Modal otvorenie/zatvorenie
- ✅ Fullscreen toggle
- ✅ Download funkcionalita
- ✅ File naming
- ✅ Error handling

### **General:**
- ✅ Responsive design
- ✅ Accessibility
- ✅ Performance
- ✅ Cross-browser compatibility

---

*Táto záloha obsahuje kompletný kód AI komponentov a funkcionalít pre Urban Analytics v2.2. Všetky AI funkcie sú implementované a testované.*

