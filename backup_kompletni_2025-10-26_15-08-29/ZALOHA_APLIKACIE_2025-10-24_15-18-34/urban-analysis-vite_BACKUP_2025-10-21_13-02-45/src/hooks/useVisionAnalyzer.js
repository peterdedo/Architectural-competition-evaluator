import { useState, useCallback } from 'react';

export const useVisionAnalyzer = () => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [progress, setProgress] = useState(0);

  const analyzeDocumentWithVision = async (pdfFile, apiKey) => {
    try {
      console.log('Zaƒç√≠n√°m anal√Ωzu PDF:', pdfFile.name);
      setIsAnalyzing(true);
      setProgress(0);

      // Konvertujeme PDF na obr√°zky pomoc√≠ PDF.js
      console.log('Konvertuji PDF na obr√°zky...');
      const images = await convertPdfToImages(pdfFile);
      console.log('PDF p≈ôevedeno na', images.length, 'obr√°zk≈Ø');
      setProgress(30);

      // Vol√°me OpenAI Vision API
      console.log('Vol√°m OpenAI Vision API...');
      const analysisResult = await callOpenAIVisionAPI(images, apiKey);
      console.log('Vision API odpovƒõƒè:', analysisResult);
      setProgress(80);

      // Parsujeme v√Ωsledek
      console.log('Parsuji v√Ωsledek...');
      const extractedData = parseVisionResponse(analysisResult);
      console.log('Extrahovan√° data:', extractedData);
      setProgress(100);

      const indicatorCount = Object.keys(extractedData).length;
      console.log('Poƒçet nalezen√Ωch indik√°tor≈Ø:', indicatorCount);

      return {
        success: true,
        data: extractedData,
        message: `√öspƒõ≈°nƒõ analyzov√°no ${indicatorCount} indik√°tor≈Ø`
      };
    } catch (error) {
      console.error('Chyba p≈ôi anal√Ωze dokumentu:', error);
      return {
        success: false,
        data: {},
        message: 'Chyba p≈ôi anal√Ωze: ' + error.message
      };
    } finally {
      setIsAnalyzing(false);
    }
  };

  const convertPdfToImages = async (pdfFile) => {
    const pdfjsLib = await import('pdfjs-dist');
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

    const arrayBuffer = await pdfFile.arrayBuffer();
    const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;
    
    const images = [];
    const maxPages = Math.min(pdf.numPages, 3); // Prvn√≠ 3 str√°nky

    for (let pageNum = 1; pageNum <= maxPages; pageNum++) {
      const page = await pdf.getPage(pageNum);
      const viewport = page.getViewport({ scale: 2.0 });
      
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      await page.render({
        canvasContext: context,
        viewport: viewport
      }).promise;

      images.push(canvas.toDataURL('image/jpeg', 0.8));
    }

    return images;
  };

  const callTextAPI = async (images, apiKey) => {
    // Fallback pro textov√Ω model - pou≈æijeme pouze textov√Ω popis
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: `Analyzuj urbanistick√Ω dokument a extrahuj v≈°echny numerick√© hodnoty s jednotkami. 
            Hledej zejm√©na:
            - Plochy v m¬≤ (celkov√° plocha, zastavƒõn√° plocha, GFA, zelen√© plochy, atd.)
            - Procenta (%)
            - Poƒçty (obyvatel√©, parkovac√≠ m√≠sta, podla≈æ√≠)
            - N√°klady v Kƒç
            - Koeficienty a pomƒõry
            
            Vra≈• v√Ωsledek jako JSON objekt s kl√≠ƒçi podle typu indik√°toru:
            {
              "area_total": ƒç√≠slo, // Plocha ≈ôe≈°en√©ho √∫zem√≠, celkov√° plocha, area of interests
              "built_up_area": ƒç√≠slo, // Zastavƒõn√° plocha objekty, zastaven√© plochy, budovy
              "gfa_total": ƒç√≠slo, // Celkov√° plocha nadzemn√≠ch podla≈æ√≠, GFA, HPP
              "green_areas": ƒç√≠slo, // Zelen√© plochy, tr√°vn√≠ky, parky, vegetace
              "blue_areas": ƒç√≠slo, // Zpevnƒõn√© plochy, komunikace, chodn√≠ky, n√°mƒõst√≠
              "underground_area": ƒç√≠slo, // Celkov√° plocha podzemn√≠ch podla≈æ√≠, suter√©n
              "gfa_living": ƒç√≠slo, // HPP bydlen√≠, obytn√© plochy, bydlen√≠
              "gfa_commerce": ƒç√≠slo, // HPP komerce, obchodn√≠ plochy, komerce
              "gfa_offices": ƒç√≠slo, // HPP kancel√°≈ôe, administrativn√≠ plochy, slu≈æby
              "gfa_public": ƒç√≠slo, // HPP ve≈ôejn√° vybavenost, ve≈ôejn√© slu≈æby
              "gfa_technology": ƒç√≠slo, // HPP technologie, technick√© prostory, z√°zem√≠
              "gfa_parking": ƒç√≠slo, // HPP parkov√°n√≠, parkovac√≠ plochy, gar√°≈æe
              "parking_places_covered": ƒç√≠slo, // Parkovac√≠ st√°n√≠ kryt√°, kryt√© parkov√°n√≠
              "parking_places_public": ƒç√≠slo, // Parkovac√≠ st√°n√≠ venkovn√≠, venkovn√≠ parkov√°n√≠
              "underground_parking": ƒç√≠slo, // Parkovac√≠ st√°n√≠ podzemn√≠, podzemn√≠ parkov√°n√≠
              "parking_places_total": ƒç√≠slo // Parkovac√≠ st√°n√≠ celkem, celkov√© parkov√°n√≠
            }
            
            Pokud hodnotu nenajde≈°, nastav ji na null. Vra≈• pouze validn√≠ JSON bez dal≈°√≠ho textu.
            
            POZN√ÅMKA: Pou≈æ√≠v√°m textov√Ω model m√≠sto Vision API, tak≈æe analyzuj obecn√© urbanistick√© hodnoty.`
          }
        ],
        max_tokens: 2000
      })
    });

    if (!response.ok) {
      throw new Error(`Text API chyba: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  };

  const callOpenAIVisionAPI = async (images, apiKey) => {
    // Zkus√≠me naj√≠t dostupn√Ω Vision model
    const modelsResponse = await fetch('https://api.openai.com/v1/models', {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    });

    const modelsData = await modelsResponse.json();
    console.log('üîç Dostupn√© modely:', modelsData.data.map(m => m.id));
    
    const visionModel = modelsData.data.find(model => 
      model.id.includes('gpt-4') && 
      (model.id.includes('vision') || model.id.includes('gpt-4o'))
    );

    console.log('üéØ Vybran√Ω Vision model:', visionModel?.id);

    if (!visionModel) {
      console.log('‚ö†Ô∏è Vision model nenalezen, pou≈æ√≠v√°m textov√Ω fallback');
      return await callTextAPI(images, apiKey);
    }

    const messages = images.map(image => ({
      type: "image_url",
      image_url: {
        url: image
      }
    }));

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: visionModel.id,
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: `Analyzuj tento ƒçesk√Ω urbanistick√Ω dokument a extrahuj v≈°echny numerick√© hodnoty.

DOKUMENT OBSAHUJE:
- Bilance ploch ≈ôe≈°en√©ho √∫zem√≠ (m¬≤)
- Bilance HPP dle funkce (m¬≤) 
- Bilance parkovac√≠ch ploch (ks)

HLEDEJ TYTO KONKR√âTN√ç HODNOTY:
1. "Plocha ≈ôe≈°en√©ho √∫zem√≠" ‚Üí area_total
2. "z toho zastavƒõn√° plocha objekty" ‚Üí built_up_area  
3. "z toho plochy zelen√©" ‚Üí green_areas
4. "z toho plochy zpevnƒõn√©" ‚Üí blue_areas
5. "z toho plochy ostatn√≠" ‚Üí other_areas
   (hƒæadaj aj: "ostatn√≠", "vodn√≠", "ostatn√≠ plochy", "vodn√≠ plochy")
6. "Celkov√° plocha nadzemn√≠ch podla≈æ√≠" ‚Üí gfa_total
7. "Celkov√° plocha podzemn√≠ch podla≈æ√≠" ‚Üí basement_area
8. "HPP bydlen√≠" ‚Üí residential_gfa
9. "HPP komerce / obchod" ‚Üí commercial_gfa
10. "HPP kancel√°≈ôe / slu≈æby" ‚Üí office_gfa
11. "HPP ve≈ôejn√° vybavenost" ‚Üí public_gfa
12. "HPP technologie" ‚Üí technical_gfa
13. "HPP parkov√°n√≠" ‚Üí parking_gfa
14. "parkovac√≠ st√°n√≠ kryt√°" ‚Üí covered_parking
15. "parkovac√≠ st√°n√≠ venkovn√≠" ‚Üí outdoor_parking
16. "parkovac√≠ st√°n√≠ podzemn√≠" ‚Üí underground_parking
17. "parkovac√≠ st√°n√≠ celkem" ‚Üí total_parking

VRA≈§ POUZE JSON:
{
  "area_total": ƒç√≠slo,
  "built_up_area": ƒç√≠slo,
  "green_areas": ƒç√≠slo,
  "blue_areas": ƒç√≠slo,
  "other_areas": ƒç√≠slo,
  "gfa_total": ƒç√≠slo,
  "basement_area": ƒç√≠slo,
  "residential_gfa": ƒç√≠slo,
  "commercial_gfa": ƒç√≠slo,
  "office_gfa": ƒç√≠slo,
  "public_gfa": ƒç√≠slo,
  "technical_gfa": ƒç√≠slo,
  "parking_gfa": ƒç√≠slo,
  "covered_parking": ƒç√≠slo,
  "outdoor_parking": ƒç√≠slo,
  "underground_parking": ƒç√≠slo,
  "total_parking": ƒç√≠slo
}

D√îLE≈ΩIT√â:
- "z toho plochy ostatn√≠ (vodn√≠, ...)" = other_areas
- Ak nen√°jde≈° "ostatn√≠ plochy", vypoƒç√≠taj ich: area_total - built_up_area - green_areas - blue_areas
- Ak hodnotu nen√°jde≈°, nastav na null. Vra≈• POUZE JSON bez textu.`
              },
              ...messages
            ]
          }
        ],
        max_tokens: 2000
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå Vision API chyba:', errorData);
      throw new Error(`Vision API chyba: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Vision API √∫spƒõ≈°n√° odpovƒõƒè:', data.choices[0].message.content);
    return data.choices[0].message.content;
  };

  const parseVisionResponse = (response) => {
    console.log('Vision API odpovƒõƒè:', response);
    
    try {
      // Pokus√≠me se naj√≠t JSON v odpovƒõdi
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const jsonStr = jsonMatch[0];
        console.log('Nalezen√Ω JSON:', jsonStr);
        const parsed = JSON.parse(jsonStr);
        console.log('Parsovan√Ω JSON:', parsed);
        
        // Filtrujeme pouze ƒç√≠seln√© hodnoty
        const filtered = {};
        Object.entries(parsed).forEach(([key, value]) => {
          if (value !== null && value !== undefined && !isNaN(value) && value > 0) {
            filtered[key] = parseFloat(value);
          }
        });
        
        // Ak Vision API nerozoznalo "ostatn√≠ plochy", vypoƒç√≠tame ich ako rozdiel
        if (!filtered.other_areas && filtered.area_total && filtered.built_up_area && filtered.green_areas && filtered.blue_areas) {
          const ostatni = filtered.area_total - filtered.built_up_area - filtered.green_areas - filtered.blue_areas;
          if (ostatni > 0) {
            filtered.other_areas = ostatni;
            console.log(`‚úÖ Vypoƒç√≠tan√© ostatn√≠ plochy (fallback): ${ostatni} m¬≤`);
          } else {
            console.log(`‚ö†Ô∏è Ostatn√≠ plochy by boli z√°porn√©: ${ostatni} m¬≤`);
          }
        } else if (filtered.other_areas) {
          console.log(`‚úÖ Vision API rozoznalo ostatn√≠ plochy: ${filtered.other_areas} m¬≤`);
        }
        
        console.log('Filtrovan√© hodnoty:', filtered);
        return filtered;
      } else {
        console.log('≈Ω√°dn√Ω JSON nebyl nalezen v odpovƒõdi');
      }
    } catch (error) {
      console.error('Chyba p≈ôi parsov√°n√≠ Vision API odpovƒõdi:', error);
      console.error('Odpovƒõƒè:', response);
    }
    
    return {};
  };

  const searchIndicatorsInDocument = async (documentData, selectedIndicators) => {
    // Tato funkce bude vol√°na pozdƒõji pro dynamick√© vyhled√°v√°n√≠
    // Zat√≠m vr√°t√≠me pouze vybran√© indik√°tory z dokumentu
    const result = {};
    selectedIndicators.forEach(indicatorId => {
      if (documentData[indicatorId] !== undefined) {
        result[indicatorId] = documentData[indicatorId];
      }
    });
    return result;
  };

  return {
    analyzeDocumentWithVision,
    searchIndicatorsInDocument,
    isAnalyzing,
    progress
  };
};