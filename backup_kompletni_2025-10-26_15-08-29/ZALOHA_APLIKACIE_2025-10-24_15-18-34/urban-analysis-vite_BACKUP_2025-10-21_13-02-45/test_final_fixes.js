// Fin√°lny test v≈°etk√Ωch oprav
const extractDataWithRegexFromText = (pdfText) => {
  // Preprocessing textu
  let text = pdfText.toLowerCase()
    .replace(/\d\)/g, '') // Odstr√°nime footnote markery ako 1), 2), 3)
    .replace(/\s+/g, ' ') // Normalizujeme whitespace
    .replace(/m2|m¬≤|ks/g, '') // Odstr√°nime jednotky
    .trim();

  // Funkcia na extrakciu hodnoty - berie len PRV√â ƒç√≠slo na riadku
  const extractValue = (pattern) => {
    // Hƒæad√°me pattern nasledovan√Ω ƒç√≠slom (m√¥≈æe ma≈• medzery ako thousand separators)
    // Pre C03, C04 - ignorujeme text v z√°tvork√°ch
    let regexPattern;
    if (pattern.source.includes('zelen√©') || pattern.source.includes('zpevnƒõn√©')) {
      // Pre C03, C04 - hƒæad√°me pattern, potom z√°tvorky, potom ƒç√≠sla
      regexPattern = new RegExp(`${pattern.source}[\\s\\S]*?\\)\\s+([\\d\\s]+)`, 'i');
    } else {
      // Pre ostatn√© - ≈°tandardn√Ω pr√≠stup
      regexPattern = new RegExp(`${pattern.source}\\s+([\\d\\s]+)`, 'i');
    }
    
    const match = text.match(regexPattern);
    if (!match) return null;
    
    // Berieme len prv√© ƒç√≠slo, ignorujeme zvy≈°ok
    const fullMatch = match[1].trim();
    
    // Pre parkovacie stania a podobn√© pr√≠pady - berieme len prv√© ƒç√≠slo
    // ALE pre "celkem" - berieme thousand separators
    if ((pattern.source.includes('parkovac√≠') || pattern.source.includes('st√°n√≠')) && 
        !pattern.source.includes('celkem')) {
      const simpleMatch = fullMatch.match(/^(\d+)/);
      if (simpleMatch) {
        return parseInt(simpleMatch[1], 10);
      }
    }
    
    // Pre ostatn√© pr√≠pady - hƒæad√°me thousand separators (napr. "40 690")
    const firstNumberMatch = fullMatch.match(/^(\d+(?:\s+\d{3})*)/);
    if (firstNumberMatch) {
      // Vyƒçist√≠me ƒç√≠slo od medzier (thousand separators)
      const cleanNumber = firstNumberMatch[1].replace(/\s/g, '');
      return parseInt(cleanNumber, 10);
    }
    
    // Fallback - len prv√© ƒç√≠slo
    const simpleMatch = fullMatch.match(/^(\d+)/);
    if (simpleMatch) {
      return parseInt(simpleMatch[1], 10);
    }
    
    return null;
  };

  // Vylep≈°en√© patterns pre nov√© indik√°tory - ≈°pecifick√© pre PDF form√°t
  const patterns = {
    // Bilance ploch ≈ôe≈°en√©ho √∫zem√≠
    C01: /plocha\s+≈ôe≈°en√©ho\s+√∫zem√≠/i,
    C02: /z\s+toho\s+zastavƒõn√°\s+plocha\s+objekty/i,
    C03: /z\s+toho\s+plochy\s+zelen√©/i,
    C04: /z\s+toho\s+plochy\s+zpevnƒõn√©/i,
    C05: /plochy\s+ostatn√≠/i,
    
    // Bilance HPP dle funkce
    C06: /celkov√°\s+plocha\s+nadzemn√≠ch\s+podla≈æ√≠/i,
    C07: /celkov√°\s+plocha\s+podzemn√≠ch\s+podla≈æ√≠/i,
    C08: /hpp\s+bydlen√≠/i,
    C09: /hpp\s+komerce\s+\/\s+obchod/i,
    C10: /hpp\s+kancel√°≈ôe\s+\/\s+slu≈æby/i,
    C11: /hpp\s+ve≈ôejn√°\s+vybavenost/i,
    C12: /hpp\s+technologie\s+\/\s+chodby\s+\/\s+z√°zem√≠\s+v\s+objektech/i,
    C13: /hpp\s+parkov√°n√≠\s+\/\s+komunikace\s+v\s+objektech/i,
    
    // Bilance parkovac√≠ch ploch
    C14: /parkovac√≠\s+st√°n√≠\s+kryt√°\s+\(nadzemn√≠\)/i,
    C15: /parkovac√≠\s+st√°n√≠\s+venkovn√≠/i,
    C16: /parkovac√≠\s+st√°n√≠\s+podzemn√≠/i,
    C17: /parkovac√≠\s+st√°n√≠\s+celkem/i
  };

  const data = {};
  
  // Extrahujeme hodnoty pre ka≈æd√Ω indik√°tor
  for (const [key, regex] of Object.entries(patterns)) {
    const val = extractValue(regex);
    if (val) {
      data[key] = val;
      console.log(`‚úÖ Nalezeno ${key}: ${val}`);
    } else {
      console.warn("Missing:", key);
    }
  }
  
  console.log('Regex extrahovan√© data:', data);
  return { success: true, data };
};

// Testovac√≠ d√°ta
const text_CHKAU = `
BILANCE PLOCH ≈òE≈†EN√âHO √öZEM√ç m2 odhad n√°klad≈Ø za m2
Plocha ≈ôe≈°en√©ho √∫zem√≠ 40 690
z toho zastavƒõn√° plocha objekty 12 650
z toho plochy zelen√© (zatravnƒõn√© nezpev. plochy vƒç. zelen√Ωch p√°s≈Ø apod.) 13 650 1 500
z toho plochy zpevnƒõn√© (komunikace, chodn√≠ky, n√°mƒõst√≠) 14 390 2 500
Celkov√° plocha nadzemn√≠ch podla≈æ√≠ 86 300 50 000
Celkov√° plocha podzemn√≠ch podla≈æ√≠ 26 500 35 000
HPP bydlen√≠ 51 000 45 000
HPP komerce / obchod 2 200 50 000
HPP kancel√°≈ôe / slu≈æby 24 300 50 000
HPP ve≈ôejn√° vybavenost 1 300 45 000
HPP technologie / chodby / z√°zem√≠ v objektech 7 500 25 000
HPP parkov√°n√≠ / komunikace v objektech 23 000 20 000
parkovac√≠ st√°n√≠ kryt√° (nadzemn√≠) 0 0
parkovac√≠ st√°n√≠ venkovn√≠ 40 100 000
parkovac√≠ st√°n√≠ podzemn√≠ 795 700 000
parkovac√≠ st√°n√≠ celkem 835
TABULKA BILANC√ç
`;

const text_PHAP = `
BILANCE PLOCH ≈òE≈†EN√âHO √öZEM√ç m2 odhad n√°klad≈Ø za m2
Plocha ≈ôe≈°en√©ho √∫zem√≠ 40 979
z toho zastavƒõn√° plocha objekty 17 580
z toho plochy zelen√© (zatravnƒõn√© nezpev. plochy vƒç. zelen√Ωch p√°s≈Ø apod.) 8 914 2 400
z toho plochy zpevnƒõn√© (komunikace, chodn√≠ky, n√°mƒõst√≠) 14 178 5 800
Celkov√° plocha nadzemn√≠ch podla≈æ√≠ 98 440 41 998 1)
Celkov√° plocha podzemn√≠ch podla≈æ√≠ 24 447 25 000
HPP bydlen√≠ 45 554 36 000
HPP komerce / obchod 5 673 50 000
HPP kancel√°≈ôe / slu≈æby 34 788 48 000
HPP ve≈ôejn√° vybavenost 2 384 50 000
HPP technologie / chodby / z√°zem√≠ v objektech 140 42 000
HPP parkov√°n√≠ / komunikace v objektech 34 348 25 000
parkovac√≠ st√°n√≠ kryt√° (nadzemn√≠) 334 210 000
parkovac√≠ st√°n√≠ venkovn√≠ 95 70 000
parkovac√≠ st√°n√≠ podzemn√≠ 727 850 000
parkovac√≠ st√°n√≠ celkem 1 156
TABULKA BILANC√ç
`;

// Oƒçak√°van√© v√Ωsledky pre porovnanie
const expected_CHKAU = {
  C01: 40690,  // Plocha ≈ôe≈°en√©ho √∫zem√≠
  C02: 12650,  // zastavƒõn√° plocha objekty
  C03: 13650,  // plochy zelen√©
  C04: 14390,  // plochy zpevnƒõn√©
  C06: 86300,  // Celkov√° plocha nadzemn√≠ch podla≈æ√≠
  C07: 26500,  // Celkov√° plocha podzemn√≠ch podla≈æ√≠
  C08: 51000,  // HPP bydlen√≠
  C09: 2200,   // HPP komerce / obchod
  C10: 24300,  // HPP kancel√°≈ôe / slu≈æby
  C11: 1300,   // HPP ve≈ôejn√° vybavenost
  C12: 7500,   // HPP technologie / chodby / z√°zem√≠ v objektech
  C13: 23000,  // HPP parkov√°n√≠ / komunikace v objektech
  C14: 0,      // parkovac√≠ st√°n√≠ kryt√° (nadzemn√≠)
  C15: 40,     // parkovac√≠ st√°n√≠ venkovn√≠
  C16: 795,    // parkovac√≠ st√°n√≠ podzemn√≠
  C17: 835     // parkovac√≠ st√°n√≠ celkem
};

const expected_PHAP = {
  C01: 40979,  // Plocha ≈ôe≈°en√©ho √∫zem√≠
  C02: 17580,  // zastavƒõn√° plocha objekty
  C03: 8914,   // plochy zelen√©
  C04: 14178,  // plochy zpevnƒõn√©
  C06: 98440,  // Celkov√° plocha nadzemn√≠ch podla≈æ√≠
  C07: 24447,  // Celkov√° plocha podzemn√≠ch podla≈æ√≠
  C08: 45554,  // HPP bydlen√≠
  C09: 5673,   // HPP komerce / obchod
  C10: 34788,  // HPP kancel√°≈ôe / slu≈æby
  C11: 2384,   // HPP ve≈ôejn√° vybavenost
  C12: 140,    // HPP technologie / chodby / z√°zem√≠ v objektech
  C13: 34348,  // HPP parkov√°n√≠ / komunikace v objektech
  C14: 334,    // parkovac√≠ st√°n√≠ kryt√° (nadzemn√≠)
  C15: 95,     // parkovac√≠ st√°n√≠ venkovn√≠
  C16: 727,    // parkovac√≠ st√°n√≠ podzemn√≠
  C17: 1156    // parkovac√≠ st√°n√≠ celkem
};

// Testovanie
console.log('üß™ FINAL TESTING CHKAU (ƒåesk√© Budƒõjovice)');
console.log('==========================================');
const result_CHKAU = extractDataWithRegexFromText(text_CHKAU);

console.log('\nüß™ FINAL TESTING PHAP (E.ON)');
console.log('==============================');
const result_PHAP = extractDataWithRegexFromText(text_PHAP);

// Porovnanie v√Ωsledkov
console.log('\nüìä COMPARISON RESULTS');
console.log('=====================');

const compareResults = (actual, expected, name) => {
  console.log(`\n${name}:`);
  let correct = 0;
  let total = 0;
  
  for (const [key, expectedValue] of Object.entries(expected)) {
    total++;
    const actualValue = actual.data[key];
    if (actualValue === expectedValue) {
      console.log(`‚úÖ ${key}: ${actualValue} (expected: ${expectedValue})`);
      correct++;
    } else {
      console.log(`‚ùå ${key}: ${actualValue} (expected: ${expectedValue})`);
    }
  }
  
  console.log(`\nAccuracy: ${correct}/${total} (${Math.round(correct/total*100)}%)`);
  return { correct, total };
};

const chkauStats = compareResults(result_CHKAU, expected_CHKAU, 'CHKAU');
const phapStats = compareResults(result_PHAP, expected_PHAP, 'PHAP');

console.log('\nüéØ OVERALL SUMMARY');
console.log('==================');
console.log(`CHKAU: ${chkauStats.correct}/${chkauStats.total} (${Math.round(chkauStats.correct/chkauStats.total*100)}%)`);
console.log(`PHAP: ${phapStats.correct}/${phapStats.total} (${Math.round(phapStats.correct/phapStats.total*100)}%)`);
console.log(`Total: ${chkauStats.correct + phapStats.correct}/${chkauStats.total + phapStats.total} (${Math.round((chkauStats.correct + phapStats.correct)/(chkauStats.total + phapStats.total)*100)}%)`);
